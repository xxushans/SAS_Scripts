
%MACRO SOMERSD(INDS= ,  DV= ,   MODEL_SCORE=  , BANDS=MAX);

%TRACKER(SOMERSD);

%* Upvalue Parameters;
DATA _NULL_;
  SET SASHELP.VMACRO;
  WHERE SCOPE NOT IN ('GLOBAL', 'AUTOMATIC');
  CALL SYMPUTX(NAME, UPCASE(VALUE));
RUN;

%* Parameter Validation;
%IF %BQUOTE(&INDS.)= %THEN %DO;
   %PUT ERROR: You need to provide an input value for INDS.;
   %PUT ERROR- SOMERSD macro will now terminate.;
   %RETURN;
%END;
%IF %BQUOTE(&DV.)= %THEN %DO;
   %PUT ERROR: You need to provide an input value for DV.;
   %PUT ERROR- SOMERSD macro will now terminate.;
   %RETURN;
%END;
%IF %BQUOTE(&MODEL_SCORE.)= %THEN %DO;
   %PUT ERROR: You need to provide an input value for MODEL_SCORE.;
   %PUT ERROR- SOMERSD macro will now terminate.;
   %RETURN;
%END;

%IF %SYSFUNC(EXIST(&INDS)) = 0 %THEN %DO;
   %PUT ERROR: THE DATASET &INDS DOES NOT EXIST.;
   %PUT ERROR- SOMERSD macro will now terminate.;
   %RETURN;
%END;

%IF (&BANDS. NE MAX) AND NOT(%BETWEEN(&BANDS.,10,1000)) %THEN %DO;
   %LET BANDS = 20;
   %PUT WARNING: The value of BANDS was outside of {10-1000, MAX}.;
   %PUT WARNING- BANDS was set to 20.;
%END;

%IF %INDEX(&INDS, .) = 0 %THEN %DO;
  %LET INDS = WORK.&INDS;
%END;

%LOCAL LIB DSN KS_2SAMPLE MAX_BANDS TOTAL_NUM TOTAL_TGT TOTAL_NONTGT TGT_RATE GINI SOMERSD;

%LET LIB = %SCAN(&INDS,1,.);
%LET DSN = %SCAN(&INDS,2,.);
%PUT &LIB. &DSN.;
PROC SQL NOPRINT;
   SELECT UPCASE(NAME) INTO : VARNAMES SEPARATED BY ' '
   FROM DICTIONARY.COLUMNS
   WHERE LIBNAME = "&LIB" AND MEMNAME = "&DSN";
QUIT;
%IF %FIND(&VARNAMES, &DV) = 0 %THEN %DO;
  %PUT ERROR: THE VARIABLE &DV IS NOT IN &INDS.;
  %PUT ERROR- SOMERSD macro will now terminate.;
  %RETURN;
%END;
%IF %FIND(&VARNAMES, &MODEL_SCORE) = 0 %THEN %DO;
  %PUT ERROR: THE VARIABLE &MODEL_SCORE  IS NOT IN &INDS.;
  %PUT ERROR- SOMERSD macro will now terminate.;
  %RETURN;
%END;


%* BANDS = MAX;
PROC SQL NOPRINT;
   SELECT COUNT(DISTINCT &MODEL_SCORE.) INTO : MAX_BANDS FROM &INDS.;
QUIT;
%IF &BANDS. GT &MAX_BANDS. %THEN %DO;
   %LET BANDS = &MAX_BANDS.;
%END;
%IF &BANDS. = MAX %THEN %DO;
   %LET BANDS = &MAX_BANDS.;
%END;

PROC NPAR1WAY DATA = &INDS. EDF NOPRINT;
   VAR &MODEL_SCORE.;
   CLASS &DV.;
   OUTPUT OUT = _GSD0 ( KEEP = _D_ RENAME = (_D_ = KS_2SAMPLE));
RUN;

DATA _NULL_; SET _GSD0;
   CALL SYMPUT('KS_2SAMPLE', KS_2SAMPLE);
RUN;

PROC RANK DATA = &INDS. GROUPS = &BANDS. OUT = _GSD1;
   VAR &MODEL_SCORE.;
   RANKS SCORE_RANKS;
RUN;

PROC MEANS DATA =_GSD1 NOPRINT NWAY;
   CLASS SCORE_RANKS;
   VAR &DV.;
   OUTPUT OUT = _GSD2 N=N SUM=SUM_TGT;
RUN;

PROC SQL NOPRINT;
   SELECT SUM(N), SUM(SUM_TGT), SUM(N)-SUM(SUM_TGT) 
   INTO : TOTAL_NUM, : TOTAL_TGT, : TOTAL_NONTGT
   FROM _GSD2;
QUIT;

PROC SORT DATA = _GSD2;   BY SCORE_RANKS;
RUN;

DATA _GSD3; SET _GSD2;
   RETAIN CUM_TGT CUM_NONTGT CUM_TGT_P CUM_NONTGT_P CUM_TGT_RATE;
   CUM_TGT = SUM(CUM_TGT,SUM_TGT);
   CUM_NONTGT = SUM(CUM_NONTGT, N - SUM_TGT);
   CUM_TGT_P = CUM_TGT/&TOTAL_TGT.;
   CUM_NONTGT_P = CUM_NONTGT/&TOTAL_NONTGT.;
   CUM_TGT_RATE = CUM_TGT/SUM(CUM_NONTGT, CUM_TGT);
   L_TGT_P = LAG(CUM_TGT_P);
   L_NONTGT_P = LAG(CUM_NONTGT_P);
   IF _N_ = 1 THEN DO;
      L_TGT_P = 0;
	  L_NONTGT_P = 0;
   END;
   RECTANGLE = (CUM_TGT_P + L_TGT_P) * (CUM_NONTGT_P - L_NONTGT_P);
   %* Alternative calculation ((N - SUM_TGT)/ &TOTAL_NONTGT.)* (L_TGT_P + CUM_TGT_P);
RUN;

PROC MEANS DATA= _GSD3 NOPRINT NWAY;
  VAR RECTANGLE ;
  OUTPUT OUT=_GSD4 SUM(RECTANGLE )= ;
RUN;

DATA _GSD5; SET _GSD4 (KEEP = RECTANGLE );
  SOMERSD = ABS(1- RECTANGLE);
  CALL SYMPUT('SOMERSD',SOMERSD);
RUN;

%LET TGT_RATE = %SYSFUNC(ROUND(%SYSEVALF(&TOTAL_TGT. / &TOTAL_NUM.), 0.0001));
%LET GINI = %SYSFUNC(ROUND(%SYSEVALF(&SOMERSD. * (1 -&TOTAL_TGT. / &TOTAL_NUM.)), 0.0001));

DATA SOMERSD_SUMMARY;
  PREDICTOR = "&MODEL_SCORE.";
  TARGET = "&DV.";
  TGT_RATE = &TGT_RATE.;
  KS_2SAMPLE = &KS_2SAMPLE.;
  GINI = &GINI.;
  SOMERSD = &SOMERSD.;
RUN;

PROC DATASETS NODETAILS NOLIST;
   DELETE _GSD: ;
RUN;  QUIT;		

%MEND;
