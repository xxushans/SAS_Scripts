*********************************************************************************;
* Model Validation Macro Version 1.0                                            *;
*                                                                               *;
* This macro is used to quickly assess model performance by generating key      *;
* model evaluation statistics and charts. The output statistics were validated  *;
* by comparing with statistics generated by Proc Logistic.                      *;
*                                                                               *;
* Macro Parameters:                                                             *;
* -	Data: scored dataset for model validation                                   *;
* -	Score: model score                                                          *;
* -	Y: target variable (0/1)                                                    *;
* -	Grp: number of score buckets                                                *;
* example scripts to call the macro:                                            *;
*  %model_validation(data = my_ds, score = p_score_v1, y = bad_ind, grp = 20);  *;
*                                                                               *;
* Macro Output:                                                                 *;
* -	Performance Summary Table                                                   *;
* -	KS, AUC/C Statistics, GINI/SOMERâ€™S D, AND DIVERGENCE                        *;
* -	ROC curve, Lift Chart                                                       *;
*                                                                               *;
* Contact:                                                                      *;
* s.X                                                                           *;
*********************************************************************************;

%macro model_validation(data = , score = , y = , grp = 10 , hl_ks = 1);
 
options nonumber nodate orientation = landscape linesize = 160 ls = 150; 
 
*** DEFAULT GROUP NUMBER FOR REPORT ***;
/*%let grp = 20;*/
 
data _tmp1 (keep = &y &score);
  set &data;
  where &y in (1, 0)  and &score ~= .;
run;
 
filename lst_out temp;
 
proc printto new print = lst_out;
run;
 
*** CONDUCT NON-PARAMETRIC TESTS ***; 
ods select none;


ods output wilcoxonscores = _wx;
ods output kolsmir2stats = _ks;
proc npar1way wilcoxon edf data = _tmp1;
  class &y;
  var &score;
run;
 
proc printto;
run;
 
proc sort data = _wx;
  by class;
run;
 
*** CALCULATE ROC AND GINI ***;
data _null_;
  set _wx end = eof;
  by class;
 
  array a{2, 3} _temporary_;
  if _n_ = 1 then do;
    a[1, 1] = n;
    a[1, 2] = sumofscores;
    a[1, 3] = expectedsum;
  end;
  else do;
    a[2, 1] = n;
  end;
  if eof then do;
    auc  = (a[1, 2] - a[1, 3]) / (a[1, 1] * a[2, 1])  + 0.5;
    if auc <= 0.5 then auc = 1 - auc;
    gini = 2 * (auc - 0.5);  
	gini2 = abs((2 * a[1, 2] - a[1, 1] * (a[1, 1] + 1)) / (a[1, 1] * a[2, 1]) - 1);
    auc2 = 0.5 + gini2/2;
    call execute('%let auc = '||put(auc, 10.4)||';');
	call execute('%let auc2 = '||put(auc2, 10.4)||';');
    call execute('%let gini = '||put(gini, 10.4)||';');
    call execute('%let gini2 = '||put(gini2, 10.4)||';');

  end;
run;

%put auc is &auc  auc2 is &auc2 gini is &gini gini2 is &gini2;

*** CALCULATE KS ***;
data _null_;
  set _ks;
 
  if _n_ = 1 then do;
    ks = nvalue2 * 100;
    call execute('%let ks = '||put(ks, 10.4)||';');
  end;
run;
 
*** CAPTURE SCORE POINT FOR MAX KS ***;
data _null_;
  infile lst_out;
  input @" at Maximum = " ks_score;
  output;
  call execute('%let ks_score = '||put(ks_score, 10.4)||';');
  stop;
run;
 
proc summary data = _tmp1 nway;
  class &y;
  output out = _data_ (drop = _type_ _freq_)
  mean(&score.) = mean var(&score.) = variance;
run;
 
*** CALCULATE DIVERGENCE ***;
data _null_;
  set _last_ end = eof;
  array a{2, 2} _temporary_;
  if _n_ = 1 then do;
    a[1, 1] = mean;
    a[1, 2] = variance;
  end;
  else do;
    a[2, 1] = mean;
    a[2, 2] = variance;
  end;
  if eof then do;
    divergence = (a[1, 1] - a[2, 1]) ** 2 / ((a[1, 2] + a[2, 2]) / 2);
    call execute('%let divergence = '||put(divergence, 10.4)||';'); 
  end; 
run;
 
*** CAPTURE THE DIRECTION OF SCORE ***;
proc corr data = _tmp1 outs= _cor noprint;
  var &y;
  with &score;
run;
  
data _null_;
  set _cor (where=(_TYPE_="CORR"));
  if &y >= 0 then do;
    call symput('desc', 'descending');
  end;
  else do;
    call symput('desc', ' ');
  end;
run;
%put &desc;
 
proc rank data = _tmp1 out = _tmp2 groups = &grp ties = low;
  var &score;
  ranks rank;
run;
 
proc summary data = _last_ nway;
  class rank;
  output out = _data_ (drop = _type_ rename = (_freq_ = freq))
  min(&score) = min_score max(&score) = max_score
  sum(&y) = bads;
run;
 
proc sql noprint;
  select sum(bads) into :bcnt from _last_;
  select sum(freq) - sum(bads) into :gcnt from _last_;
quit;
 
proc sort data = _last_ (drop = rank);
  by &desc min_score;
run;
 
data rpt_ds;
  set _last_;
  by &desc min_score;
 
  i + 1; 
  percent = i / 100; 
  good  = freq - bads;
  odds  = good / bads;
 
  hit_rate = bads / freq;
  retain cum_bads cum_good cum_freq;
  cum_good + good;
  cum_bads + bads;
  cum_freq + freq;
  cum_hit_rate = cum_bads / cum_freq;
 
  cat_rate = bads / &bcnt;
  good_rate = good / &gcnt;
  retain cum_cat_rate cum_good_rate;
  cum_cat_rate + cat_rate; 
  cum_good_rate + good_rate;

  ks_v = abs(cum_good_rate - cum_cat_rate);
 
  format symbol $4.;
  if i = 1 then symbol = 'BAD';
  else if i = &grp - 1 then symbol = 'V';
  else if i = &grp then symbol = 'GOOD';
  else symbol = '|';
run;
 
/*proc printto print = "%upcase(%trim(&score))_SEPARATION_REPORT.TXT" new;*/
/*run;*/
ods select all;

proc sql noprint; select max(ks_v), round((max(ks_v) * 100),10**-4) into :max_ks_v, :max_ks_pct from rpt_ds;quit;
proc sql noprint; select i into :ks_sb from rpt_ds where round(ks_v,0.0001) = round(&max_ks_v,0.0001);quit;
/*%put &max_ks_v;*/


proc report data = rpt_ds spacing = 1 split = "*" headline nowd;
  column("GOOD BAD SEPARATION REPORT FOR %upcase(%trim(&score)) IN DATA %upcase(%trim(&data))*
          MAXIMUM KS = %trim(&max_ks_pct) AT SCORE Rank %trim(&ks_sb), MAXIMUM OBS LEVEL KS = %trim(&ks)*
          ( AUC STATISTICS = %trim(&auc), GINI COEFFICIENT = %trim(&gini), DIVERGENCE = %trim(&divergence) )*"
         percent symbol i min_score max_score good bads freq odds hit_rate cum_hit_rate cat_rate cum_cat_rate cum_good_rate ks_v);
 
  define percent       / noprint order order = data;
  define symbol        / "" center               width = 5 center;
  define i             / "Score Rank" center     width = 5 center order;
  define min_score     / "MIN SCORE"             width = 10 format = 9.4        analysis min center;
  define max_score     / "MAX SCORE"             width = 10 format = 9.4        analysis max center;
  define good          / "GOOD #"                width = 10 format = comma9.    analysis sum;
  define bads          / "BAD #"                 width = 10 format = comma9.    analysis sum;
  define freq          / "TOTAL #"               width = 10 format = comma9.    analysis sum;
  define odds          / "ODDS*(Good/Bad)"       width = 10 format = 8.2        order;
  define hit_rate      / "BAD RATE*(Bad/Total)"  width = 10 format = percent9.2 order center;
  define cum_hit_rate  / "CUM. BAD RATE*(Cum.Bad/Cum.Total)"   width = 10 format = percent9.2 order;
  define cat_rate      / "BAD PERCENT*(Bad/Total Bad)"           width = 10 format = percent9.2 order center;
  define cum_cat_rate  / "CUM. BAD*PERCENT"       width = 10 format = percent9.2 order; 
  define cum_good_rate / "CUM. Good*PERCENT"     width = 10 format = percent9.2 order; 
  define ks_v          / "K-S"     width = 10 format = percent9.2 order;
  %if &hl_ks = 1 %then %do;
  compute ks_v;
  if round(ks_v,0.0001) = round(&max_ks_v,0.0001)
  then call define(_row_,'style','style={background=YELLOW}');
  endcomp;
  %end;

  rbreak after / summarize dol skip;
run; 
 
proc printto;
run;

data plot_ds;
set rpt_ds (where=(i=1))
rpt_ds
;
if _n_ = 1 then do;
	array change _numeric_;
    do over change;
    change=0;
	end;
end;
run;

goptions reset=all device=gif xpixels=600 ypixels=600;

title1  h=12pt "Receiver Operating Characteristic (ROC) Curve";
title2 h=10pt "Cumulative Bad vs. Cumulative Good";
title3 u=1 h=10pt "AUC STATISTICS = %trim(&auc), GINI COEFFICIENT = %trim(&gini)";
symbol1 interpol=join color=mob value=dot h=0.8 w=1.5; 
symbol2 interpol=join color=black value=none line=2; 

axis1 label=(h=1.2 'Cumulative Good') value= (h=1.2);
axis2 label=(h=1.2 'Cumulative Bad') value= (h=1.2);
axis3 label=(h=1.2 'Bad Rate') value= (h=1.2);
axis4 label=(h=1.2 'Model Score Rank') value= (h=1.2);


proc gplot data=plot_ds;
plot (cum_cat_rate cum_good_rate) * cum_good_rate /overlay grid haxis=axis1 vaxis=axis2;
run;

goptions device=gif xpixels=800 ypixels=600;
title1  h=12pt "Lift Chart";
title2 h=10pt "Bad Rate vs. Model Score Rank";
title3 u=1 h=10pt "GINI COEFFICIENT = %trim(&gini), MAXIMUM KS = %trim(&ks)";
proc gplot data=rpt_ds;
plot hit_rate * i /haxis=axis4 vaxis=axis3;
run;

title1;
title2;
title3;

 
***********************************************************;
*                     END OF THE MACRO                    *;
***********************************************************; 
%mend model_validation;
